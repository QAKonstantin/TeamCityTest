{"uid":"1ebc2d019ad1aca1","name":"Проверка создания проекта","fullName":"tests.backend.test_create_project.TestProjectCreate#test_positive_creating_project_by_roles","historyId":"297a9fb6a95614abb7a607008777fbce","time":{"start":1711456651790,"stop":1711456651797,"duration":7},"description":"Проверяется создание проекта и пополнение в общем списке проектов","descriptionHtml":"<p>Проверяется создание проекта и пополнение в общем списке проектов</p>\n","status":"broken","statusMessage":"ValueError: Unexpected status code: 400, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7f7b7db33a90>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f7b7dba1240>\nuser_create = <function user_create.<locals>._user_create at 0x7f7b7dba12d0>\nrole = 'AGENT_MANAGER'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:66: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7f7b7da040d0>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'wburke@example.org', 'password': 'vs7P0ty4PbP', 'roles': {'role': [{'roleId': 'AGENT_MANAGER', 'scope': 'g'}]}, 'username': 'that'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        response = self.session.request(method=method, url=url, json=data)\n        if need_logging:\n            self.log_request_and_response(response, expected_status, need_verify_status)\n        if need_verify_status:\n            if response.status_code != expected_status:\n>               raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE               ValueError: Unexpected status code: 400, expected: 200\n\ncustom_requester/custom_requester.py:34: ValueError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1711456650597,"stop":1711456650622,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session","time":{"start":1711456651783,"stop":1711456651783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"super_admin","time":{"start":1711456651783,"stop":1711456651788,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_create","time":{"start":1711456651788,"stop":1711456651788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data","time":{"start":1711456651788,"stop":1711456651788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется создание проекта и пополнение в общем списке проектов","status":"broken","statusMessage":"ValueError: Unexpected status code: 400, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7f7b7db33a90>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f7b7dba1240>\nuser_create = <function user_create.<locals>._user_create at 0x7f7b7dba12d0>\nrole = 'AGENT_MANAGER'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:66: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7f7b7da040d0>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'wburke@example.org', 'password': 'vs7P0ty4PbP', 'roles': {'role': [{'roleId': 'AGENT_MANAGER', 'scope': 'g'}]}, 'username': 'that'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        response = self.session.request(method=method, url=url, json=data)\n        if need_logging:\n            self.log_request_and_response(response, expected_status, need_verify_status)\n        if need_verify_status:\n            if response.status_code != expected_status:\n>               raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE               ValueError: Unexpected status code: 400, expected: 200\n\ncustom_requester/custom_requester.py:34: ValueError","steps":[{"name":"Подготовка данных для создания проекта","time":{"start":1711456651790,"stop":1711456651790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Создание и авторизация пользователя с ролью AGENT_MANAGER","time":{"start":1711456651790,"stop":1711456651795,"duration":5},"status":"broken","statusMessage":"ValueError: Unexpected status code: 400, expected: 200\n","statusTrace":"  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/tests/backend/test_create_project.py\", line 32, in test_positive_creating_project_by_roles\n    role_user = user_create(role)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 66, in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/user_api.py\", line 9, in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 34, in send_request\n    raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b6c79a233038df69","name":"log","source":"b6c79a233038df69.txt","type":"text/plain","size":3232}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"user_create::0","time":{"start":1711456651856,"stop":1711456651857,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data::0","time":{"start":1711456651857,"stop":1711456651907,"duration":50},"status":"broken","statusMessage":"ValueError: Проект с id rhlXQD9C4NE не был создан\n","statusTrace":"  File \"/home/runner/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 932, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 90, in project_data\n    super_admin.api_manager.project_api.clean_up_project(project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 30, in clean_up_project\n    raise ValueError(f\"Проект с id {created_project_id} не был создан\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"user_session::0","time":{"start":1711456651908,"stop":1711456651908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"subSuite","value":"Создание проекта"},{"name":"severity","value":"critical"},{"name":"suite","value":"Управление проектами"},{"name":"parentSuite","value":"API тесты"},{"name":"tag","value":"api"},{"name":"tag","value":"projects"},{"name":"host","value":"fv-az1385-502"},{"name":"thread","value":"7912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.test_create_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"role","value":"'AGENT_MANAGER'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"715eb17b7ae3c1ae","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/125//#testresult/715eb17b7ae3c1ae","status":"passed","time":{"start":1711455838157,"stop":1711455838380,"duration":223}},{"uid":"22502768c6d21db9","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/124//#testresult/22502768c6d21db9","status":"passed","time":{"start":1711454790286,"stop":1711454790549,"duration":263}},{"uid":"7a1675b7e99d7a4","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/123//#testresult/7a1675b7e99d7a4","status":"broken","statusDetails":"ValueError: Unexpected status code: 401, expected: 200","time":{"start":1711454307289,"stop":1711454307289,"duration":0}},{"uid":"7aa3a0df96fdf97","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/122//#testresult/7aa3a0df96fdf97","status":"broken","statusDetails":"ValueError: Unexpected status code: 401, expected: 200","time":{"start":1711452159856,"stop":1711452159856,"duration":0}},{"uid":"789e47bbcab7950a","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/121//#testresult/789e47bbcab7950a","status":"passed","time":{"start":1711451062764,"stop":1711451063009,"duration":245}},{"uid":"9150c8363cd4774","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/120//#testresult/9150c8363cd4774","status":"passed","time":{"start":1711369183591,"stop":1711369183823,"duration":232}},{"uid":"cf7f2d186a6c207a","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/119//#testresult/cf7f2d186a6c207a","status":"passed","time":{"start":1711356084486,"stop":1711356084722,"duration":236}}]},"tags":["projects","api"]},"source":"1ebc2d019ad1aca1.json","parameterValues":["'AGENT_MANAGER'"]}