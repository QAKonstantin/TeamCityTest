{"uid":"30fbd09a376789bd","name":"Проверка невозможности создания билд конфигурации","fullName":"tests.backend.test_create_build_conf.TestBuildConfCreate#test_create_build_conf_with_empty_attributes","historyId":"4ba5ecaf909ddf5321128bd1db749264","time":{"start":1712576164220,"stop":1712576164257,"duration":37},"description":"Проверяется валидация с пустыми атрибутами билд конфигурации","descriptionHtml":"<p>Проверяется валидация с пустыми атрибутами билд конфигурации</p>\n","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_build_conf.TestBuildConfCreate object at 0x7f00687a0c10>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f00687e3a30>\nbuild_conf_data = <function build_conf_data.<locals>._create_build_conf_data at 0x7f00687e3ac0>\nsuper_admin = <entities.user.User object at 0x7f00687ea710>\nattribute = 'project_id', status_code = <HTTPStatus.NOT_FOUND: 404>\ntext_error = \"NotFoundException: No project found by locator 'count:1,id:\"\nvalue = ''\n\n    @pytest.mark.parametrize((\"attribute\", \"status_code\", \"text_error\", \"value\"), [\n        (\"name\", HTTPStatus.BAD_REQUEST,\n         \"BadRequestException: When creating a build type, non empty name should be provided.\", ''),\n        (\"id\", HTTPStatus.INTERNAL_SERVER_ERROR,\n         \"InvalidIdentifierException: Build configuration or template ID must not be empty\", ''),\n        (\"project_id\", HTTPStatus.NOT_FOUND,\n         \"NotFoundException: No project found by locator 'count:1,id:\", '')\n    ], ids=[\"name\",\n            \"id\",\n            \"project_id\"])\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление билд конфигурациями\")\n    @allure.sub_suite(\"Создание билд конфигурации\")\n    @allure.sub_suite(\"Негативные сценарии\")\n    @allure.title('Проверка невозможности создания билд конфигурации')\n    @allure.description('Проверяется валидация с пустыми атрибутами билд конфигурации')\n    @pytest.mark.build_conf\n    @pytest.mark.api\n    def test_create_build_conf_with_empty_attributes(self, project_data, build_conf_data, super_admin, attribute,\n                                                     status_code, text_error, value):\n        with (allure.step('Подготовка данных для создания проекта и билд конфигурации')):\n            project_data_1 = project_data()\n            build_conf_data_1 = dict(BuildConfData.create_build_conf_data(project_data_1.id))\n            if attribute == \"project_id\":\n                build_conf_data_1[\"project\"][\"id\"] = ''\n            else:\n                build_conf_data_1[attribute] = value\n    \n        with allure.step('Отправка запроса на создание проекта'):\n>           created_project_response = super_admin.api_manager.project_api.create_project(\n                project_data_1.model_dump()).text\n\ntests/backend/test_create_build_conf.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/project_api.py:9: in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.project_api.ProjectApi object at 0x7f00687ea7a0>, method = 'POST'\nendpoint = '/app/rest/projects'\ndata = {'copyAllAssociatedSettings': True, 'id': 'sGlVthdb9s0', 'name': 'support', 'parentProject': {'locator': '_Root'}}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1712576149105,"stop":1712576149128,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage","time":{"start":1712576149129,"stop":1712576164172,"duration":15043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"super_admin","time":{"start":1712576164172,"stop":1712576164214,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session","time":{"start":1712576164172,"stop":1712576164172,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data","time":{"start":1712576164214,"stop":1712576164214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"build_conf_data","time":{"start":1712576164214,"stop":1712576164214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется валидация с пустыми атрибутами билд конфигурации","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_build_conf.TestBuildConfCreate object at 0x7f00687a0c10>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f00687e3a30>\nbuild_conf_data = <function build_conf_data.<locals>._create_build_conf_data at 0x7f00687e3ac0>\nsuper_admin = <entities.user.User object at 0x7f00687ea710>\nattribute = 'project_id', status_code = <HTTPStatus.NOT_FOUND: 404>\ntext_error = \"NotFoundException: No project found by locator 'count:1,id:\"\nvalue = ''\n\n    @pytest.mark.parametrize((\"attribute\", \"status_code\", \"text_error\", \"value\"), [\n        (\"name\", HTTPStatus.BAD_REQUEST,\n         \"BadRequestException: When creating a build type, non empty name should be provided.\", ''),\n        (\"id\", HTTPStatus.INTERNAL_SERVER_ERROR,\n         \"InvalidIdentifierException: Build configuration or template ID must not be empty\", ''),\n        (\"project_id\", HTTPStatus.NOT_FOUND,\n         \"NotFoundException: No project found by locator 'count:1,id:\", '')\n    ], ids=[\"name\",\n            \"id\",\n            \"project_id\"])\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление билд конфигурациями\")\n    @allure.sub_suite(\"Создание билд конфигурации\")\n    @allure.sub_suite(\"Негативные сценарии\")\n    @allure.title('Проверка невозможности создания билд конфигурации')\n    @allure.description('Проверяется валидация с пустыми атрибутами билд конфигурации')\n    @pytest.mark.build_conf\n    @pytest.mark.api\n    def test_create_build_conf_with_empty_attributes(self, project_data, build_conf_data, super_admin, attribute,\n                                                     status_code, text_error, value):\n        with (allure.step('Подготовка данных для создания проекта и билд конфигурации')):\n            project_data_1 = project_data()\n            build_conf_data_1 = dict(BuildConfData.create_build_conf_data(project_data_1.id))\n            if attribute == \"project_id\":\n                build_conf_data_1[\"project\"][\"id\"] = ''\n            else:\n                build_conf_data_1[attribute] = value\n    \n        with allure.step('Отправка запроса на создание проекта'):\n>           created_project_response = super_admin.api_manager.project_api.create_project(\n                project_data_1.model_dump()).text\n\ntests/backend/test_create_build_conf.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/project_api.py:9: in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.project_api.ProjectApi object at 0x7f00687ea7a0>, method = 'POST'\nendpoint = '/app/rest/projects'\ndata = {'copyAllAssociatedSettings': True, 'id': 'sGlVthdb9s0', 'name': 'support', 'parentProject': {'locator': '_Root'}}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","steps":[{"name":"Подготовка данных для создания проекта и билд конфигурации","time":{"start":1712576164221,"stop":1712576164221,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Отправка запроса на создание проекта","time":{"start":1712576164221,"stop":1712576164256,"duration":35},"status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200\n","statusTrace":"  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/tests/backend/test_create_build_conf.py\", line 122, in test_create_build_conf_with_empty_attributes\n    created_project_response = super_admin.api_manager.project_api.create_project(\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 9, in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 47, in send_request\n    raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"acc83c002087b87a","name":"log","source":"acc83c002087b87a.txt","type":"text/plain","size":2588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"build_conf_data::0","time":{"start":1712576164369,"stop":1712576164369,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data::0","time":{"start":1712576164370,"stop":1712576164471,"duration":101},"status":"broken","statusMessage":"ValueError: Проект с id sGlVthdb9s0 не был создан\n","statusTrace":"  File \"/home/runner/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 932, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 120, in project_data\n    super_admin.api_manager.project_api.clean_up_project(project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 30, in clean_up_project\n    raise ValueError(f\"Проект с id {created_project_id} не был создан\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"user_session::0","time":{"start":1712576164472,"stop":1712576164472,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage::0","time":{"start":1712576164909,"stop":1712576174398,"duration":9489},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"subSuite","value":"Негативные сценарии"},{"name":"suite","value":"Управление билд конфигурациями"},{"name":"parentSuite","value":"API тесты"},{"name":"tag","value":"api"},{"name":"tag","value":"build_conf"},{"name":"host","value":"fv-az1543-340"},{"name":"thread","value":"7885-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.test_create_build_conf"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"attribute","value":"'project_id'"},{"name":"status_code","value":"<HTTPStatus.NOT_FOUND: 404>"},{"name":"text_error","value":"'NotFoundException: No project found by locator 'count:1,id:'"},{"name":"value","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":10,"unknown":0,"total":13},"items":[{"uid":"17b9699c1fc51040","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/226//#testresult/17b9699c1fc51040","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712575679052,"stop":1712575679052,"duration":0}},{"uid":"4c00bd164a944ebc","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/221//#testresult/4c00bd164a944ebc","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712574353170,"stop":1712574353170,"duration":0}},{"uid":"ad262bb661336901","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/216//#testresult/ad262bb661336901","status":"passed","time":{"start":1712408229793,"stop":1712408230039,"duration":246}},{"uid":"29a64cd433c3ccf3","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/215//#testresult/29a64cd433c3ccf3","status":"passed","time":{"start":1712160918622,"stop":1712160919537,"duration":915}},{"uid":"8ba9dc1ccfe0a3cc","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/214//#testresult/8ba9dc1ccfe0a3cc","status":"passed","time":{"start":1712160281000,"stop":1712160281949,"duration":949}},{"uid":"8dc5ca4d205abf31","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/213//#testresult/8dc5ca4d205abf31","status":"passed","time":{"start":1712158392586,"stop":1712158393583,"duration":997}},{"uid":"95f46948ae695e9","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/212//#testresult/95f46948ae695e9","status":"passed","time":{"start":1712158077387,"stop":1712158078343,"duration":956}},{"uid":"4505ce92c8d8898e","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/211//#testresult/4505ce92c8d8898e","status":"passed","time":{"start":1712157571167,"stop":1712157572030,"duration":863}},{"uid":"5468fd8663d3a827","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/210//#testresult/5468fd8663d3a827","status":"passed","time":{"start":1711983587126,"stop":1711983588081,"duration":955}},{"uid":"1c5c648b2ce147f7","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/208//#testresult/1c5c648b2ce147f7","status":"passed","time":{"start":1711982399639,"stop":1711982400971,"duration":1332}},{"uid":"80017a61b46668d9","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/207//#testresult/80017a61b46668d9","status":"passed","time":{"start":1711981738679,"stop":1711981740357,"duration":1678}},{"uid":"3e0a89ee84b1c804","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/206//#testresult/3e0a89ee84b1c804","status":"passed","time":{"start":1711981074528,"stop":1711981075379,"duration":851}}]},"tags":["api","build_conf"]},"source":"30fbd09a376789bd.json","parameterValues":["'project_id'","<HTTPStatus.NOT_FOUND: 404>","'NotFoundException: No project found by locator 'count:1,id:'","''"]}