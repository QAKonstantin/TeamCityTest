{"uid":"73198619eb61c7bc","name":"Проверка создания проекта","fullName":"tests.backend.test_create_project.TestProjectCreate#test_positive_creating_project_by_roles","historyId":"297a9fb6a95614abb7a607008777fbce","time":{"start":1712577098369,"stop":1712577098419,"duration":50},"description":"Проверяется создание проекта и пополнение в общем списке проектов","descriptionHtml":"<p>Проверяется создание проекта и пополнение в общем списке проектов</p>\n","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7fd15e2f09d0>\nproject_data = <function project_data.<locals>._create_project_data at 0x7fd15e1beef0>\nuser_create = <function user_create.<locals>._user_create at 0x7fd15e1beb00>\nrole = 'AGENT_MANAGER'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:96: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7fd15e102140>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'nicholashansen@example.org', 'password': 'JFa4hsTTigR', 'roles': {'role': [{'roleId': 'AGENT_MANAGER', 'scope': 'g'}]}, 'username': 'pull'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1712577083309,"stop":1712577083351,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage","time":{"start":1712577083351,"stop":1712577097976,"duration":14625},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session","time":{"start":1712577098334,"stop":1712577098334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"super_admin","time":{"start":1712577098334,"stop":1712577098368,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_create","time":{"start":1712577098368,"stop":1712577098368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data","time":{"start":1712577098368,"stop":1712577098368,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется создание проекта и пополнение в общем списке проектов","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7fd15e2f09d0>\nproject_data = <function project_data.<locals>._create_project_data at 0x7fd15e1beef0>\nuser_create = <function user_create.<locals>._user_create at 0x7fd15e1beb00>\nrole = 'AGENT_MANAGER'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:96: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7fd15e102140>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'nicholashansen@example.org', 'password': 'JFa4hsTTigR', 'roles': {'role': [{'roleId': 'AGENT_MANAGER', 'scope': 'g'}]}, 'username': 'pull'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","steps":[{"name":"Подготовка данных для создания проекта","time":{"start":1712577098370,"stop":1712577098370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Создание и авторизация пользователя с ролью AGENT_MANAGER","time":{"start":1712577098370,"stop":1712577098410,"duration":40},"status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200\n","statusTrace":"  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/tests/backend/test_create_project.py\", line 32, in test_positive_creating_project_by_roles\n    role_user = user_create(role)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 96, in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/user_api.py\", line 9, in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 47, in send_request\n    raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"133149446fd0306b","name":"log","source":"133149446fd0306b.txt","type":"text/plain","size":2605}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"user_create::0","time":{"start":1712577098437,"stop":1712577098437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data::0","time":{"start":1712577098443,"stop":1712577098525,"duration":82},"status":"broken","statusMessage":"ValueError: Проект с id qsZqTp849ba не был создан\n","statusTrace":"  File \"/home/runner/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 932, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 120, in project_data\n    super_admin.api_manager.project_api.clean_up_project(project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 30, in clean_up_project\n    raise ValueError(f\"Проект с id {created_project_id} не был создан\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"user_session::0","time":{"start":1712577098526,"stop":1712577098526,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage::0","time":{"start":1712577098526,"stop":1712577108201,"duration":9675},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"critical"},{"name":"suite","value":"Управление проектами"},{"name":"subSuite","value":"Создание проекта"},{"name":"parentSuite","value":"API тесты"},{"name":"tag","value":"api"},{"name":"tag","value":"projects"},{"name":"host","value":"fv-az529-148"},{"name":"thread","value":"7770-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.test_create_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"role","value":"'AGENT_MANAGER'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":10,"unknown":0,"total":14},"items":[{"uid":"db99af6259c5aee","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/227//#testresult/db99af6259c5aee","status":"broken","statusDetails":"ValueError: Unexpected status code: 403, expected: 200","time":{"start":1712576164457,"stop":1712576164510,"duration":53}},{"uid":"8949f0532a439033","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/226//#testresult/8949f0532a439033","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712575695170,"stop":1712575695170,"duration":0}},{"uid":"3f8ca895b83d08f3","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/221//#testresult/3f8ca895b83d08f3","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712574369126,"stop":1712574369126,"duration":0}},{"uid":"9b63e1b47c317816","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/216//#testresult/9b63e1b47c317816","status":"passed","time":{"start":1712408230591,"stop":1712408230776,"duration":185}},{"uid":"ce5303c008b1f8ea","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/215//#testresult/ce5303c008b1f8ea","status":"passed","time":{"start":1712160919649,"stop":1712160919924,"duration":275}},{"uid":"46f78e9ee3f9c296","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/214//#testresult/46f78e9ee3f9c296","status":"passed","time":{"start":1712160282105,"stop":1712160282360,"duration":255}},{"uid":"c018a0f8c9bb658a","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/213//#testresult/c018a0f8c9bb658a","status":"passed","time":{"start":1712158393721,"stop":1712158393996,"duration":275}},{"uid":"8799649ee4c00a05","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/212//#testresult/8799649ee4c00a05","status":"passed","time":{"start":1712158078403,"stop":1712158078626,"duration":223}},{"uid":"c95ee0f9fc35c3f3","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/211//#testresult/c95ee0f9fc35c3f3","status":"passed","time":{"start":1712157572196,"stop":1712157572477,"duration":281}},{"uid":"9891823f4f4983f1","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/210//#testresult/9891823f4f4983f1","status":"passed","time":{"start":1711983588184,"stop":1711983588485,"duration":301}},{"uid":"875d24b310f351ac","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/208//#testresult/875d24b310f351ac","status":"passed","time":{"start":1711982401007,"stop":1711982401204,"duration":197}},{"uid":"99d68c716a517ba2","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/207//#testresult/99d68c716a517ba2","status":"passed","time":{"start":1711981740621,"stop":1711981740813,"duration":192}},{"uid":"7e74aa466c8cd81a","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/206//#testresult/7e74aa466c8cd81a","status":"passed","time":{"start":1711981075491,"stop":1711981075739,"duration":248}}]},"tags":["projects","api"]},"source":"73198619eb61c7bc.json","parameterValues":["'AGENT_MANAGER'"]}