{"uid":"dc5290d4ead52558","name":"Проверка создания проекта","fullName":"tests.backend.test_create_project.TestProjectCreate#test_positive_creating_project_by_roles","historyId":"5873742bf1798692fa6d8d5ab10a7a86","time":{"start":1712577098411,"stop":1712577098482,"duration":71},"description":"Проверяется создание проекта и пополнение в общем списке проектов","descriptionHtml":"<p>Проверяется создание проекта и пополнение в общем списке проектов</p>\n","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7fdc0b6e4e50>\nproject_data = <function project_data.<locals>._create_project_data at 0x7fdc0b5ceef0>\nuser_create = <function user_create.<locals>._user_create at 0x7fdc0b5ceb00>\nrole = 'PROJECT_ADMIN'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:96: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7fdc0b68c1f0>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'margaret06@example.org', 'password': 'jR1qj0TqxOu', 'roles': {'role': [{'roleId': 'PROJECT_ADMIN', 'scope': 'g'}]}, 'username': 'give'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1712577083309,"stop":1712577083331,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage","time":{"start":1712577083331,"stop":1712577098008,"duration":14677},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"super_admin","time":{"start":1712577098357,"stop":1712577098409,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session","time":{"start":1712577098357,"stop":1712577098357,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data","time":{"start":1712577098410,"stop":1712577098410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_create","time":{"start":1712577098410,"stop":1712577098410,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется создание проекта и пополнение в общем списке проектов","status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7fdc0b6e4e50>\nproject_data = <function project_data.<locals>._create_project_data at 0x7fdc0b5ceef0>\nuser_create = <function user_create.<locals>._user_create at 0x7fdc0b5ceb00>\nrole = 'PROJECT_ADMIN'\n\n    @pytest.mark.parametrize(\"role\", [\n        Roles.SYSTEM_ADMIN.value,\n        Roles.PROJECT_ADMIN.value,\n        Roles.AGENT_MANAGER.value,\n    ], ids=[\"By system admin\",\n            \"By project admin\",\n            \"By agent manager\"])\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.title('Проверка создания проекта')\n    @allure.description('Проверяется создание проекта и пополнение в общем списке проектов')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_positive_creating_project_by_roles(self, project_data, user_create, role):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step(f'Создание и авторизация пользователя с ролью {role}'):\n>           role_user = user_create(role)\n\ntests/backend/test_create_project.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:96: in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\napi/user_api.py:9: in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user_api.UserApi object at 0x7fdc0b68c1f0>, method = 'POST'\nendpoint = '/app/rest/users'\ndata = {'email': 'margaret06@example.org', 'password': 'jR1qj0TqxOu', 'roles': {'role': [{'roleId': 'PROJECT_ADMIN', 'scope': 'g'}]}, 'username': 'give'}\nexpected_status = <HTTPStatus.OK: 200>, need_logging = True\nneed_verify_status = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=HTTPStatus.OK, need_logging=True,\n                     need_verify_status=True):\n        \"\"\"\n        Врапер для запросов. Позволяет прикручивать дополнительную логику\n        :param method: Метод запроса\n        :param endpoint: Ендпоинт для склейки с BASE_URL\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало no-content запросы\n        :param expected_status: Ожидаемый статус код\n        :param need_logging: Флаг для логирования. По умолчанию = True\n        :param need_verify_status: Флаг для проверки статус кода в ответе. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        if endpoint == \"/authenticationTest.html?csrf\":\n            url = f\"{self.base_url}{endpoint}\"\n            response = self.session.request(method=method, url=url, json=data)\n        else:\n            kwargs = {\"json\": data}\n            response: Response = CoverageListener(\n                method=method,\n                base_url=self.base_url,\n                raw_path=endpoint,\n                uri_params={},\n                session=self.session,\n                **kwargs\n            ).response\n            if need_logging:\n                self.log_request_and_response(response, expected_status, need_verify_status)\n            if need_verify_status:\n                if response.status_code != expected_status:\n>                   raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\nE                   ValueError: Unexpected status code: 403, expected: 200\n\ncustom_requester/custom_requester.py:47: ValueError","steps":[{"name":"Подготовка данных для создания проекта","time":{"start":1712577098411,"stop":1712577098415,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Создание и авторизация пользователя с ролью PROJECT_ADMIN","time":{"start":1712577098415,"stop":1712577098482,"duration":67},"status":"broken","statusMessage":"ValueError: Unexpected status code: 403, expected: 200\n","statusTrace":"  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/tests/backend/test_create_project.py\", line 32, in test_positive_creating_project_by_roles\n    role_user = user_create(role)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 96, in _user_create\n    super_admin.api_manager.user_api.create_user(user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/user_api.py\", line 9, in create_user\n    return self.send_request(\"POST\", \"/app/rest/users\", data=user_data)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 47, in send_request\n    raise ValueError(f\"Unexpected status code: {response.status_code}, expected: {expected_status}\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"c24ba3826f77e011","name":"log","source":"c24ba3826f77e011.txt","type":"text/plain","size":2601}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"user_create::0","time":{"start":1712577098512,"stop":1712577098512,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data::0","time":{"start":1712577098513,"stop":1712577098663,"duration":150},"status":"broken","statusMessage":"ValueError: Проект с id oC9BcIOwnmL не был создан\n","statusTrace":"  File \"/home/runner/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 932, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 120, in project_data\n    super_admin.api_manager.project_api.clean_up_project(project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 30, in clean_up_project\n    raise ValueError(f\"Проект с id {created_project_id} не был создан\")\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"setup_swagger_coverage::0","time":{"start":1712577098664,"stop":1712577107562,"duration":8898},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session::0","time":{"start":1712577098664,"stop":1712577098664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"API тесты"},{"name":"severity","value":"critical"},{"name":"suite","value":"Управление проектами"},{"name":"subSuite","value":"Создание проекта"},{"name":"tag","value":"api"},{"name":"tag","value":"projects"},{"name":"host","value":"fv-az529-148"},{"name":"thread","value":"7767-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.test_create_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"role","value":"'PROJECT_ADMIN'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":10,"unknown":0,"total":14},"items":[{"uid":"262c7c1cdc6de6e7","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/227//#testresult/262c7c1cdc6de6e7","status":"broken","statusDetails":"ValueError: Unexpected status code: 403, expected: 200","time":{"start":1712576165004,"stop":1712576165063,"duration":59}},{"uid":"3f2e3f63e4758cac","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/226//#testresult/3f2e3f63e4758cac","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712575694795,"stop":1712575694795,"duration":0}},{"uid":"71a49e873535b42c","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/221//#testresult/71a49e873535b42c","status":"broken","statusDetails":"ValueError: Session.request() got an unexpected keyword argument 'session'","time":{"start":1712574368214,"stop":1712574368214,"duration":0}},{"uid":"a741a55fe1cd1ba4","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/216//#testresult/a741a55fe1cd1ba4","status":"passed","time":{"start":1712408230094,"stop":1712408230471,"duration":377}},{"uid":"376dc262cd35bca","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/215//#testresult/376dc262cd35bca","status":"passed","time":{"start":1712160919607,"stop":1712160919800,"duration":193}},{"uid":"dfefe6d5f3134abb","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/214//#testresult/dfefe6d5f3134abb","status":"passed","time":{"start":1712160282014,"stop":1712160282211,"duration":197}},{"uid":"a0c3d09a32c4856d","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/213//#testresult/a0c3d09a32c4856d","status":"passed","time":{"start":1712158393635,"stop":1712158393830,"duration":195}},{"uid":"6a9df33692c42a48","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/212//#testresult/6a9df33692c42a48","status":"passed","time":{"start":1712158078404,"stop":1712158078669,"duration":265}},{"uid":"44d780bccfef868a","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/211//#testresult/44d780bccfef868a","status":"passed","time":{"start":1712157572114,"stop":1712157572301,"duration":187}},{"uid":"258534ba1a74f5e","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/210//#testresult/258534ba1a74f5e","status":"passed","time":{"start":1711983588123,"stop":1711983588360,"duration":237}},{"uid":"1ef23db232cc9fe9","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/208//#testresult/1ef23db232cc9fe9","status":"passed","time":{"start":1711982401013,"stop":1711982401259,"duration":246}},{"uid":"4b38059db2cc351c","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/207//#testresult/4b38059db2cc351c","status":"passed","time":{"start":1711981740388,"stop":1711981740593,"duration":205}},{"uid":"ede114beb1bb7848","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/206//#testresult/ede114beb1bb7848","status":"passed","time":{"start":1711981075428,"stop":1711981075596,"duration":168}}]},"tags":["projects","api"]},"source":"dc5290d4ead52558.json","parameterValues":["'PROJECT_ADMIN'"]}