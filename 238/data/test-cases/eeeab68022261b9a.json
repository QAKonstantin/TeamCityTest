{"uid":"eeeab68022261b9a","name":"Проверка невозможности создания проектов с одинаковыми данными","fullName":"tests.backend.test_create_project.TestProjectCreate#test_create_existing_project","historyId":"1cabda9d8f30e2e1ffcc3d48f13cc953","time":{"start":1712584426189,"stop":1712584426236,"duration":47},"description":"Проверяется валидация DuplicateProjectNameException при повторном создании проекта с существующими данными","descriptionHtml":"<p>Проверяется валидация DuplicateProjectNameException при повторном создании проекта с существующими данными</p>\n","status":"broken","statusMessage":"TypeError: can only concatenate list (not \"dict\") to list","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7f58161ea770>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f58160eb1c0>\nsuper_admin = <entities.user.User object at 0x7f5816080430>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.sub_suite(\"Негативные сценарии\")\n    @allure.title('Проверка невозможности создания проектов с одинаковыми данными')\n    @allure.description(\n        'Проверяется валидация DuplicateProjectNameException при повторном создании проекта с существующими данными')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_create_existing_project(self, project_data, super_admin):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step('Отправка запроса на создание проекта'):\n>           created_project_response = super_admin.api_manager.project_api.create_project(\n                project_data_1.model_dump()).text\n\ntests/backend/test_create_project.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/project_api.py:9: in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\ncustom_requester/custom_requester.py:34: in send_request\n    response = CoverageListener(\nutils/listener.py:33: in __init__\n    ).write_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/request_schema_handler.py:29: in write_schema\n    self.__manager.write_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/base_schemas_manager.py:123: in write_schema\n    schema_dict = self._get_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py:51: in _get_schema\n    \"paths\": self._paths(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <swagger_coverage_py.results_writers.swagger_schemas_manager.SwaggerSchemasManager object at 0x7f58160818a0>\n\n    def _paths(self):\n        path_ = self._uri.raw.split(\"?\")[0]\n        params = (\n>           self._get_path_params() + self._get_query_params() + self._get_body_params()\n        )\nE       TypeError: can only concatenate list (not \"dict\") to list\n\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py:32: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1712584407122,"stop":1712584407189,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage","time":{"start":1712584407189,"stop":1712584425369,"duration":18180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_session","time":{"start":1712584426182,"stop":1712584426182,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"super_admin","time":{"start":1712584426182,"stop":1712584426188,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"project_data","time":{"start":1712584426188,"stop":1712584426188,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется валидация DuplicateProjectNameException при повторном создании проекта с существующими данными","status":"broken","statusMessage":"TypeError: can only concatenate list (not \"dict\") to list","statusTrace":"self = <test_create_project.TestProjectCreate object at 0x7f58161ea770>\nproject_data = <function project_data.<locals>._create_project_data at 0x7f58160eb1c0>\nsuper_admin = <entities.user.User object at 0x7f5816080430>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.parent_suite(\"API тесты\")\n    @allure.suite(\"Управление проектами\")\n    @allure.sub_suite(\"Создание проекта\")\n    @allure.sub_suite(\"Негативные сценарии\")\n    @allure.title('Проверка невозможности создания проектов с одинаковыми данными')\n    @allure.description(\n        'Проверяется валидация DuplicateProjectNameException при повторном создании проекта с существующими данными')\n    @pytest.mark.projects\n    @pytest.mark.api\n    def test_create_existing_project(self, project_data, super_admin):\n        with allure.step('Подготовка данных для создания проекта'):\n            project_data_1 = project_data()\n    \n        with allure.step('Отправка запроса на создание проекта'):\n>           created_project_response = super_admin.api_manager.project_api.create_project(\n                project_data_1.model_dump()).text\n\ntests/backend/test_create_project.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/project_api.py:9: in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\ncustom_requester/custom_requester.py:34: in send_request\n    response = CoverageListener(\nutils/listener.py:33: in __init__\n    ).write_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/request_schema_handler.py:29: in write_schema\n    self.__manager.write_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/base_schemas_manager.py:123: in write_schema\n    schema_dict = self._get_schema()\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py:51: in _get_schema\n    \"paths\": self._paths(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <swagger_coverage_py.results_writers.swagger_schemas_manager.SwaggerSchemasManager object at 0x7f58160818a0>\n\n    def _paths(self):\n        path_ = self._uri.raw.split(\"?\")[0]\n        params = (\n>           self._get_path_params() + self._get_query_params() + self._get_body_params()\n        )\nE       TypeError: can only concatenate list (not \"dict\") to list\n\n../../../.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py:32: TypeError","steps":[{"name":"Подготовка данных для создания проекта","time":{"start":1712584426189,"stop":1712584426189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Отправка запроса на создание проекта","time":{"start":1712584426189,"stop":1712584426235,"duration":46},"status":"broken","statusMessage":"TypeError: can only concatenate list (not \"dict\") to list\n","statusTrace":"  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/tests/backend/test_create_project.py\", line 99, in test_create_existing_project\n    created_project_response = super_admin.api_manager.project_api.create_project(\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 9, in create_project\n    return self.send_request(\"POST\", \"/app/rest/projects\", data=project_data,\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 34, in send_request\n    response = CoverageListener(\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/utils/listener.py\", line 33, in __init__\n    ).write_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/request_schema_handler.py\", line 29, in write_schema\n    self.__manager.write_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/base_schemas_manager.py\", line 123, in write_schema\n    schema_dict = self._get_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py\", line 51, in _get_schema\n    \"paths\": self._paths(),\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py\", line 32, in _paths\n    self._get_path_params() + self._get_query_params() + self._get_body_params()\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"project_data::0","time":{"start":1712584426254,"stop":1712584426295,"duration":41},"status":"broken","statusMessage":"TypeError: can only concatenate list (not \"NoneType\") to list\n","statusTrace":"  File \"/home/runner/.local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/home/runner/.local/lib/python3.10/site-packages/_pytest/fixtures.py\", line 932, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/conftest.py\", line 120, in project_data\n    super_admin.api_manager.project_api.clean_up_project(project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 25, in clean_up_project\n    self.delete_project(created_project_id)\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/api/project_api.py\", line 20, in delete_project\n    return self.send_request(\"DELETE\", f\"/app/rest/projects/id:{project_id}\",\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/custom_requester/custom_requester.py\", line 34, in send_request\n    response = CoverageListener(\n  File \"/home/runner/work/TeamCity_Test/TeamCity_Test/utils/listener.py\", line 33, in __init__\n    ).write_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/request_schema_handler.py\", line 29, in write_schema\n    self.__manager.write_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/base_schemas_manager.py\", line 123, in write_schema\n    schema_dict = self._get_schema()\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py\", line 51, in _get_schema\n    \"paths\": self._paths(),\n  File \"/home/runner/.local/lib/python3.10/site-packages/swagger_coverage_py/results_writers/swagger_schemas_manager.py\", line 32, in _paths\n    self._get_path_params() + self._get_query_params() + self._get_body_params()\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"user_session::0","time":{"start":1712584426296,"stop":1712584426296,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_swagger_coverage::0","time":{"start":1712584427125,"stop":1712584432768,"duration":5643},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"Управление проектами"},{"name":"subSuite","value":"Негативные сценарии"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"API тесты"},{"name":"tag","value":"api"},{"name":"tag","value":"projects"},{"name":"host","value":"fv-az768-866"},{"name":"thread","value":"7809-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.test_create_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":1,"unknown":0,"total":3},"items":[{"uid":"d353fa301d72f061","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/237//#testresult/d353fa301d72f061","status":"broken","statusDetails":"TypeError: can only concatenate list (not \"dict\") to list","time":{"start":1712583795391,"stop":1712583795433,"duration":42}},{"uid":"8fba3f9c1eb75230","reportUrl":"https://QAKonstantin.github.io/TeamCity_Test/236//#testresult/8fba3f9c1eb75230","status":"passed","time":{"start":1712582297272,"stop":1712582297397,"duration":125}}]},"tags":["projects","api"]},"source":"eeeab68022261b9a.json","parameterValues":[]}